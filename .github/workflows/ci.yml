name: CI
on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  run-clippy:
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: run-clippy-check
        run: cargo +stable clippy --all-targets --all-features -- -Dwarnings -Wclippy::pedantic
      - id: run-clippy-fix
        if: ${{ !cancelled() && steps.run-clippy-check.conclusion == 'failure' }}
        run: cargo +stable clippy --all-targets --all-features --fix -- -Dwarnings -Wclippy::pedantic
      - id: generate-token
        if: ${{ !cancelled() && steps.run-clippy-fix.conclusion != 'skipped' }}
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - if: ${{ !cancelled() && steps.generate-token.conclusion == 'success' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: Run Clippy
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          branch: clippy/${{ github.ref_name }}
          delete-branch: true
          title: Run Clippy
          body:
  run-pre-commit:
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: run-pre-commit
        run: pipx run pre-commit run --all-files
      - id: generate-token
        if: ${{ !cancelled() && steps.run-pre-commit.conclusion == 'failure' }}
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - if: ${{ !cancelled() && steps.generate-token.conclusion == 'success' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: Run pre-commit
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          branch: pre-commit/${{ github.ref_name }}
          delete-branch: true
          title: Run pre-commmit
          body:
  run-rustfmt:
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: rustup toolchain install nightly --profile minimal --component rustfmt --no-self-update --allow-downgrade
      - id: run-rustfmt-check
        run: cargo +nightly fmt --check
      - id: run-rustfmt-fix
        if: ${{ !cancelled() && steps.run-rustfmt-check.conclusion == 'failure' }}
        run: cargo +nightly fmt
      - id: generate-token
        if: ${{ !cancelled() && steps.run-rustfmt-fix.conclusion != 'skipped' }}
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}
      - if: ${{ !cancelled() && steps.generate-token.conclusion == 'success' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: Run Rustfmt
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          branch: rustfmt/${{ github.ref_name }}
          delete-branch: true
          title: Run Rustfmt
          body:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - powerpc64le-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-musleabihf
          - powerpc64le-unknown-linux-musl
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter 3.7 3.8 3.9 3.10 3.11 3.12 pypy3.7 pypy3.8 pypy3.9 pypy3.10
          sccache: "true"
          manylinux: auto
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist
      - name: pytest
        if: ${{ !startsWith(github.ref, 'refs/tags/') && matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: pip install --force-reinstall --no-index --find-links ../dist pyromark && pip install -U --disable-pip-version-check -r requirements.txt && pytest
        working-directory: ./tests
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter 3.7 3.8 3.9 3.10 3.11 3.12 pypy3.7 pypy3.8 pypy3.9 pypy3.10
          sccache: "true"
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist
      - name: pytest
        if: ${{ !startsWith(github.ref, 'refs/tags/') && matrix.target == 'x86_64-pc-windows-msvc' }}
        run: pip install --force-reinstall --no-index --find-links ../dist pyromark && pip install -U --disable-pip-version-check -r requirements.txt && pytest
        working-directory: ./tests
  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-12
            target: x86_64-apple-darwin
          - runner: macos-14
            target: aarch64-apple-darwin
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --interpreter 3.7 3.8 3.9 3.10 3.11 3.12 pypy3.7 pypy3.8 pypy3.9 pypy3.10
          sccache: "true"
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist
      - name: pytest
        if: ${{ !startsWith(github.ref, 'refs/tags/') && matrix.target == 'x86_64-apple-darwin' }}
        run: pip install --force-reinstall --no-index --find-links ../dist pyromark && pip install -U --disable-pip-version-check -r requirements.txt && pytest
        working-directory: ./tests
  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
  release:
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'monosans' && startsWith(github.ref, 'refs/tags/') }}
    needs:
      - linux
      - windows
      - macos
      - sdist
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
      - uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
